<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用IDEA整合SSM框架]]></title>
    <url>%2F2018%2F11%2F01%2F%E4%BD%BF%E7%94%A8IDEA%E6%95%B4%E5%90%88SSM%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[一、安装环境和开发工具在整合Spring，SpringMVC 和 MyBatis 的过程中，很容易遇到一些小问题，因此记录下整合过程。 首先是安装环境和开发工具，如下： Window 7 Jdk 1.8 MySql 8.0 Maven 3.5.4 Tomcat 8.5.34 IntelliJ IDEA 2018 二、整体项目结构整个项目在Maven WebApp模板工程的基础上构建，不同类型的文件放置于不同的包或者路径下，全部配置完成后的工程结构如下图所示： 不同路径下的文件归类说明如下表(classpath相当于resources文件夹)： 包名/路径名 作用 controller 存放控制器 mapper DAO层接口 pojo 实体类 service 业务类（接口+实现） /com/cr/mapper 对应mapper下接口的xml文件 /spring 与spring相关的配置文件 /webapp/jsp 存放jsp文件 /*.properties 资源文件 三、配置步骤1、添加Maven依赖 新建一个Maven WebApp工程，在pom.xml添加依赖，主要包括spring、springmvc、 mybatis、mybatis-spring 、servlet 、mysql 等项的jar包。 pom.xmllt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.cr&lt;/groupId&gt; &lt;artifactId&gt;SSMTest&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;name&gt;SSMTest Maven Webapp&lt;/name&gt; &lt;!-- FIXME change it to the project's website --&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;spring.version&gt;5.0.8.RELEASE&lt;/spring.version&gt; &lt;jackson.version&gt;2.9.3&lt;/jackson.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--添加Spring MVC的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--添加Servlet的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;!--JSTL用于在控制器中将模型绑定到JSP中--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--添加spring的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--利用它处理事务问题--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--添加数据库Mysql驱动--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;!--驱动版本号一定要装正确 否则连不上 mysql 5.1.46 可以适用本机--&gt; &lt;version&gt;5.1.46&lt;/version&gt; &lt;/dependency&gt; &lt;!--添加Mybatis依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.2.6&lt;/version&gt; &lt;/dependency&gt; &lt;!--整合Mybatis与Spring的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Mybatis分页依赖 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;5.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 处理时间日期格式 --&gt; &lt;dependency&gt; &lt;groupId&gt;joda-time&lt;/groupId&gt; &lt;artifactId&gt;joda-time&lt;/artifactId&gt; &lt;version&gt;2.9.9&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 用于MD5加密 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-codec&lt;/groupId&gt; &lt;artifactId&gt;commons-codec&lt;/artifactId&gt; &lt;version&gt;1.10&lt;/version&gt; &lt;/dependency&gt; &lt;!--日志--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.12&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.12&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; &lt;!--添加Json依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--有时候不加可能会报错--&gt; &lt;dependency&gt; &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt; &lt;artifactId&gt;json-lib&lt;/artifactId&gt; &lt;version&gt;2.4&lt;/version&gt; &lt;classifier&gt;jdk15&lt;/classifier&gt; &lt;/dependency&gt; &lt;!-- 新添加处理json为java bean --&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-core-asl&lt;/artifactId&gt; &lt;version&gt;1.9.13&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt; &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt; &lt;version&gt;1.9.13&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 文件上传 高版本可以使用Multipart解析器 就不用引入这个包了 --&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;!-- 数据源的引入， 池化技术 --&gt; &lt;dependency&gt; &lt;groupId&gt;com.mchange&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.2.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-dbcp&lt;/groupId&gt; &lt;artifactId&gt;commons-dbcp&lt;/artifactId&gt; &lt;version&gt;1.2.2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;SSMTest&lt;/finalName&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.20.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt; 添加完成后的maven依赖如下： 2、配置web.xml spring上下文文件路径配置 12345&lt;!--配置Spring IoC的配置文件路径 classpath相当于resources文件夹--&gt;&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt; 这里指定了上下文配置文件为spring文件夹下的applicationContext.xml，稍后再配置这个文件。 Log4j配置 1234&lt;context-param&gt; &lt;param-name&gt;log4jRefreshInterval&lt;/param-name&gt; &lt;param-value&gt;60000&lt;/param-value&gt;&lt;/context-param&gt; ContextLoaderListener监听器配置 1234567&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;!-- 防止Spring内存溢出监听器 --&gt;&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt;&lt;/listener&gt; DispatcherServlet前置控制器配置 1234567891011&lt;servlet&gt; &lt;!--springmvc框架默认自动找到/WEB-INF/springmvc-servlet.xml作为配置文件载入web工程中 这里手动设置位置--&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/springmvc-servlet.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;async-supported&gt;true&lt;/async-supported&gt;&lt;/servlet&gt; springmvc框架默认自动找到/WEB-INF/[servlet-name]-servlet.xml作为配置文件载入web工程中 这里手动设置位置为spring文件夹下的springmvc-servlet.xml，稍后再配置这个文件。 Servlet拦截设置 1234&lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; web.xml 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1"&gt; &lt;!-- Spring配置 --&gt; &lt;!-- ================================================= --&gt; &lt;!--配置Spring IoC的配置文件路径 classpath相当于resources文件夹--&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;!--Log4j配置--&gt; &lt;context-param&gt; &lt;param-name&gt;log4jRefreshInterval&lt;/param-name&gt; &lt;param-value&gt;60000&lt;/param-value&gt; &lt;/context-param&gt; &lt;!--配置ContextLoaderListener初始化IOC容器--&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- 防止Spring内存溢出监听器 --&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.util.IntrospectorCleanupListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- Spring mvc配置 --&gt; &lt;!-- ================================================= --&gt; &lt;!--DispatcherServlet前置控制器配置--&gt; &lt;servlet&gt; &lt;!--springmvc框架默认自动找到/WEB-INF/springmvc-servlet.xml作为配置文件载入web工程中 这里手动设置位置--&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/springmvc-servlet.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;async-supported&gt;true&lt;/async-supported&gt; &lt;/servlet&gt; &lt;!--拦截内容：servlet映射设置--&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 3、applicationContext.xml配置 在spring文件夹下建立applicationContext.xml applicationContext.xml 12345678&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;!--引入spring和其他整合的配置文件 比如spring-mybatis.xml等--&gt; &lt;import resource="classpath:spring/spring-*.xml"/&gt;&lt;/beans&gt; 这里引入spring和其他整合的配置文件 比如spring-mybatis.xml等，接下来在spring文件夹下新建一个spring-mybatis.xml文件 4、spring-mybatis.xml配置 配置自动扫描，需要扫描到控制层和服务层，刚开始我这里写成了com.cr.mapper，结果导致控制器不能注入 1&lt;context:component-scan base-package="com.cr" /&gt; 新建数据库资源文件jdbc.properties，针对不同的数据库需要修改配置 同时要注意匹配数据库的版本号，比如我安装的是MySQL 8.0，之前由于驱动版本弄错了，所以总是连接数据库失败，后来改成5.1.46才解决了问题 12345678910111213141516# 针对不同的数据库需要修改配置 同时要注意匹配数据库的版本号mysql.driver=com.mysql.jdbc.Drivermysql.url=jdbc:mysql://localhost:3306/mybatismysql.username=rootmysql.password=XXXX#定义初始连接数dbcp.initialSize=0#定义最大连接数dbcp.maxActive=20#定义最大空闲dbcp.maxIdle=20#定义最小空闲dbcp.minIdle=1#定义最长等待时间dbcp.maxWait=60000 引入数据库资源文件 1234&lt;bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt; &lt;property name="location" value="classpath:jdbc.properties" /&gt;&lt;/bean&gt; 配置数据库MySQL 12345678910111213&lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt; &lt;property name="driverClassName" value="$&#123;mysql.driver&#125;" /&gt; &lt;property name="url" value="$&#123;mysql.url&#125;" /&gt; &lt;property name="username" value="$&#123;mysql.username&#125;" /&gt; &lt;property name="password" value="$&#123;mysql.password&#125;" /&gt; &lt;property name="initialSize" value="$&#123;dbcp.initialSize&#125;" /&gt; &lt;property name="maxActive" value="$&#123;dbcp.maxActive&#125;" /&gt; &lt;property name="maxIdle" value="$&#123;dbcp.maxIdle&#125;" /&gt; &lt;property name="minIdle" value="$&#123;dbcp.minIdle&#125;" /&gt; &lt;property name="maxWait" value="$&#123;dbcp.maxWait&#125;" /&gt;&lt;/bean&gt; 整合Spring和MyBatis，注意路径的书写方式是”/“不是”.” 1234567891011&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;!-- 自动扫描mapping.xml文件 注意路径是"/"不是"."--&gt; &lt;property name="mapperLocations" value="classpath:com/cr/mapper/*.xml" /&gt; &lt;property name="configuration"&gt; &lt;!--可以将之前mybatis.cfg.xml的一些配置项转移到这里来--&gt; &lt;bean class="org.apache.ibatis.session.Configuration"&gt; &lt;property name="mapUnderscoreToCamelCase" value="true" /&gt; &lt;/bean&gt; &lt;/property&gt;&lt;/bean&gt; 扫描持久层接口 1234&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.cr.mapper" /&gt; &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /&gt;&lt;/bean&gt; 数据库事务管理 1234&lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource" /&gt;&lt;/bean&gt; spring-mybatis.xml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/cache" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt; &lt;!-- 自动扫描包 包括了控制层和服务层 --&gt; &lt;context:component-scan base-package="com.cr" /&gt; &lt;!-- 引入数据库配置文件 --&gt; &lt;bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt; &lt;property name="location" value="classpath:jdbc.properties" /&gt; &lt;/bean&gt; &lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt; &lt;property name="driverClassName" value="$&#123;mysql.driver&#125;" /&gt; &lt;property name="url" value="$&#123;mysql.url&#125;" /&gt; &lt;property name="username" value="$&#123;mysql.username&#125;" /&gt; &lt;property name="password" value="$&#123;mysql.password&#125;" /&gt; &lt;property name="initialSize" value="$&#123;dbcp.initialSize&#125;" /&gt; &lt;property name="maxActive" value="$&#123;dbcp.maxActive&#125;" /&gt; &lt;property name="maxIdle" value="$&#123;dbcp.maxIdle&#125;" /&gt; &lt;property name="minIdle" value="$&#123;dbcp.minIdle&#125;" /&gt; &lt;property name="maxWait" value="$&#123;dbcp.maxWait&#125;" /&gt; &lt;/bean&gt; &lt;!-- 整合Spring和MyBatis，就不需要之前的mybatis配置文件了 --&gt; &lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;!-- 自动扫描mapping.xml文件 注意路径是"/"不是"."--&gt; &lt;property name="mapperLocations" value="classpath:com/cr/mapper/*.xml" /&gt; &lt;property name="configuration"&gt; &lt;!--可以将之前mybatis.cfg.xml的一些配置项转移到这里来--&gt; &lt;bean class="org.apache.ibatis.session.Configuration"&gt; &lt;property name="mapUnderscoreToCamelCase" value="true" /&gt; &lt;/bean&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 扫描DAO持久层接口 --&gt; &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.cr.mapper" /&gt; &lt;property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /&gt; &lt;/bean&gt; &lt;!-- 数据库事务管理 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;/bean&gt;&lt;/beans&gt; 5、springmvc-servlet.xml配置 springmvc-servlet.xml 123456789101112131415161718192021222324252627&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"&gt; &lt;!-- scan the package and the sub package --&gt; &lt;context:component-scan base-package="com.cr.controller"/&gt; &lt;!-- don't handle the static resource --&gt; &lt;mvc:default-servlet-handler /&gt; &lt;!-- if you use annotation you must configure following setting --&gt; &lt;mvc:annotation-driven /&gt; &lt;!-- configure the InternalResourceViewResolver --&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="internalResourceViewResolver"&gt; &lt;!--相当于寻找/jsp/xxx.jsp文件--&gt; &lt;!-- 前缀 --&gt; &lt;property name="prefix" value="/jsp/" /&gt; &lt;!-- 后缀 --&gt; &lt;property name="suffix" value=".jsp" /&gt; &lt;/bean&gt;&lt;/beans&gt; 6、建立实体类 在pojo包下新建一个实体User类，包含用户名username 和 密码password 字段，alt + insert 生成 setter和getter方法 User.java 1234567891011121314151617181920212223package com.cr.pojo;public class User &#123; private String username; private String password; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125;&#125; 7、DAO层建立 创建测试用表t_user，并添加两条数据 在mapper包下新建一个UserMapper接口，包含一个select查询方法，可以查询用户是否存在，若不存在返回null UserMapper.java 1234567package com.cr.mapper;import com.cr.pojo.User;public interface UserMapper &#123; User select(User user);&#125; 创建UserMapper和mybatis映射文件 UserMapper.xml，路径是resource/com/cr/mapper UserMapper.xml 123456789&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;&lt;mapper namespace="com.cr.mapper.UserMapper"&gt; &lt;select id="select" parameterType="com.cr.pojo.User" resultType="com.cr.pojo.User"&gt; select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125; &lt;/select&gt;&lt;/mapper&gt; 8、服务层建立 建立UserService接口，位于service包下 UserService.java 12345678910package com.cr.service;import com.cr.pojo.User;public interface UserService &#123; /** * 根据user信息检查数据库中是否存在该用户 */ User get(User user);&#125; 在service包下建立impl子包，添加实现类UserServiceImpl UserServiceImpl.java 1234567891011121314151617181920package com.cr.service.impl;import com.cr.mapper.UserMapper;import com.cr.pojo.User;import com.cr.service.UserService;import org.springframework.stereotype.Service;import javax.annotation.Resource;// @Service用于业务层 功能等同于@component@Service("userService")public class UserServiceImpl implements UserService &#123; @Resource private UserMapper userMapper; @Override public User get(User user) &#123; // 通过Mapper的select方法查询用户 return userMapper.select(user); &#125;&#125; 9、建立控制器 在controller包下建立控制器UserController，根据表单的用户名和密码，在数据中匹配，如果存在该用户，则跳转到登录成功界面user.jsp，如果用户不存在则返回null，重定向回登录界面，以便于重新登录。 UserController.java 1234567891011121314151617181920212223242526272829303132333435package com.cr.controller;import com.cr.pojo.User;import com.cr.service.UserService;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;import javax.annotation.Resource;// spring-mybatis.xml和springmvc-servlet.xml都配置了扫描控制层@Controllerpublic class UserController &#123; // 注入UserService @Resource private UserService userService; @RequestMapping(value = "/login") public String login(User user) &#123; ModelAndView mv = new ModelAndView(); System.out.println("开始查询---"); user = userService.get(user); if (user != null) &#123; System.out.println("查到的User: " + user.getUsername()); mv.addObject("user", user); // 转到user.jsp用户界面 return "user"; &#125; else &#123; System.out.println("未查到此用户"); // 查不到用户信息，则重定向回登录界面 System.out.println("重定向回登录界面---"); return "login"; &#125; &#125;&#125; 10、建立Jsp页面 login.jsp 123456789101112131415161718192021222324252627282930&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;login&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;用户登录界面&lt;/h1&gt;&lt;h2&gt;用户信息&lt;/h2&gt;&lt;h3&gt;Tom 123&lt;/h3&gt;&lt;h3&gt;Jack 456&lt;/h3&gt;&lt;br&gt;&lt;form id="form" action="/login" method="post"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;用户名&lt;/td&gt; &lt;td&gt;&lt;input id="username" name="username" value="" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密码&lt;/td&gt; &lt;td&gt;&lt;input id="password-always-checkbox" name="password" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td align="right"&gt;&lt;input type="submit" value="提交"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; user.jsp 1234567891011&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;User&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;用户登录成功&lt;/h1&gt;&lt;br&gt;欢迎您: $&#123;user&#125;&lt;/body&gt;&lt;/html&gt; 四、部署项目1、Tomcat配置 2、启动服务器 浏览器访问http://localhost:8080/login 填写错误的用户名或者密码，浏览器将重新返回登录界面，控制台显示如下： 填写正确的用户名Tom和密码123，跳转到登录成功界面user.jsp，显示如下： 以上说明SSM框架整合成功。项目下载地址：https://github.com/wychencr/SSM-Test 五、一些注意事项 MySQL的驱动要匹配本机安装的版本 resources文件夹要被标记为Resource Root xml配置文件中的classpath相当于/resources IDEA可能会提示上下文配置文件没有添加，只要打开工程结构选项，把当前xml文件添加到工程中即可 注意各个xml配置文件中扫描包的位置，如果有遗漏就会报错 注意各个jar包的版本问题，我原来使用最新的Mybatis 3.4.6就会出现报错 java.lang.IllegalAccessError: org.apache.commons.dbcp.DelegatingPreparedStatement.isClosed() 修改版本为3.2.6后解决问题]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[绑定个人域名与Github pages]]></title>
    <url>%2F2018%2F10%2F19%2F%E7%BB%91%E5%AE%9A%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E4%B8%8EGithub-pages%2F</url>
    <content type="text"><![CDATA[一、申请个人域名本文承接 使用Hexo和Github建立个人主页 当我们使用Hexo在github pages上部署好个人页面后，就可以通过username.github.io访问了，接下来要做的就是申请一个属于自己的域名，然后将域名与上述的网址绑定起来，这样就可以通过个人域名来访问自己个人站点了。 1、申请来源 国内服务商我们可以阿里云或者腾讯云，国外服务商可以选择GoDaddy，支持支付宝支付。 申请的域名根据珍惜程度，或者域名使用时间，需要收取不同的费用。对于个人域名来说，腾讯云或者阿里云上面的活动价格每年最低只要几元。 freenom 是一个可以申请免费域名的网站，在freenom上面可以申请到免费的顶级域名.tk .ml .ga .cf .gq 。 2、顶级域名参考自3分钟弄明白顶级域名二级域名子域名父域名的区别 顶级域名 Top-level domains，first-level domains（TLDs） :是互联网DNS等级之中的最高级的域，保存于DNS根域的名字空间中。顶级域名是域名的最后一个部分，即是域名最后一点之后的字母，比如常见的.com 顶级域名分为4类 通用顶级域 ：如”.com”、”.net”、”.org”、”.edu”、”.info”等，均由国外公司负责管理 国家及地区顶级域 ：如”.cn”代表中国，”.uk”代表英国等，地理顶级域名一般由各个国家或地区负责管理。 基础建设顶级域 测试顶级域 比如上述的.tk域名是南太平洋岛国托克劳的顶级域名, .ml 是非洲国家马里的后缀, .ga 域名为加蓬国家顶级域名后缀, .cf 是中非共和国的后缀, .gq域名是赤道几内亚国家地区顶级域名。 3、注册freenom freenom的官方网站 这个网站一般都不是很稳定，建议使用vpn登入，首先要注册一个账号，直接使用谷歌邮箱注册即可，使用国内的邮箱应该不可以，收不到邮件验证码。 4、检索域名在首页的搜索框中，输入自己想申请的域名名称，点击检查可用性按钮，可以看到前面几个免费的顶级域名 点击现在获取按钮，加入购物车 Period 选择12个月免费，如果超过12个月就需要收费了。 当域名快到期时，freenom会发邮件提醒，可以直接再续期一年。 然后点击Continue按钮。 在Review &amp; Checkout界面，填写一些基本信息，点击complete order即可。 这样一个属于自己域名就申请并购买完成了。 值得注意的是，这些申请的免费域名不需要备案，对搜索引擎的友好度也不高，并且不算稳定，可能会被freenom突然收回，如果需要稳定性，建议选择付费域名。 二、freenom域名解析1、设置DNS进入我的域名界面，点击Manage Domain按钮 点击Manage Freenom DNS按钮 添加两条记录，按照如下设置即可。 1234Name: 空/wwwType: CNAMETTL: 14440(默认)Target: &lt;username&gt;.github.io 网上很多说法都是使用A类型解析，需要填写github的ip地址或者ping自己username.github.io的IP地址，我经过测试，只需要填写CNAME解析即可。 相关参数的含义如下： 2、关联github pages登录github，进入username.github.io这个仓库，点击Setting，往下翻，找到github pages的设置项。 在自定义域名栏输入刚刚申请到的域名名称，不需要加http或https前缀，点击Save即可。 刷新后，进入仓库，可以看到多了一个CNAME文件，里面的内容就是我们的域名名称。 大约等10分钟后，就可以通过域名访问到我们的个人站点了。]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>freenom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git使用的常用命令]]></title>
    <url>%2F2018%2F10%2F19%2FGit%E4%BD%BF%E7%94%A8-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[一、git工作流程 Workspace工作区：是当前工作目录，可以在此目录编辑文件 Index缓存区：add指令，保存文件的改动 Repository仓库：commit指令，将多次的文件改动最后提交 Remote远程仓库：可以将本地仓库代码传到远程仓库上，方便多人远程协作 二、常用操作1、初始化仓库1$ git init 2、加到缓存区12345678# 指定文件，提交到暂存区$ git add &lt;filename&gt;# 将工作区的变化提交到暂存区，包括文件修改和新增，但是不包括删除的文件$ git add .# 将工作区的变化提交到暂存区，包括新增，删除和修改的所有内容$ git add -A 3、提交到版本库12# 将修改从暂存区提交到版本库，并添加备注message$ git commit -m “message” 4、查看信息123456789101112131415161718# 查看上次提交之后是否有修改$ git status# 查看上次提交之后是否有修改，简短输出结果$ git status -s# 查看尚未缓存的改动$ git diff# 查看已缓存的改动$ git diff -cached# 查看已缓存的与未缓存的所有改动$ git diff HEAD# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 显示指定文件相关的每一次diff$ git log -p [file] 5、回退操作1234567891011121314# 恢复暂存区的指定文件到工作区$ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区$ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard 6、分支操作123456789101112131415161718192021222324252627282930# 列出所有本地分支$ git branch # 列出所有远程分支$ git branch -r # 列出所有本地分支和远程分支$ git branch -a # 新建一个分支，但依然停留在当前分支$ git branch [branch-name] # 新建一个分支，并切换到该分支$ git checkout -b [branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 合并指定分支到当前分支$ git merge [branch] # 选择一个commit，合并进当前分支$ git cherry-pick [commit] # 删除分支$ git branch -d [branch-name] # 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 7、克隆仓库123# repo:Git 仓库 directory:本地目录$ git clone &lt;repo&gt;$ git clone &lt;repo&gt; &lt;directory&gt; 8、与远程仓库同步12345678# 增加一个新的远程仓库，并命名$ git remote add [origin] [url] # 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch] # 上传本地指定分支到远程仓库$ git push [remote] [branch]]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo和Github建立个人主页]]></title>
    <url>%2F2018%2F10%2F18%2F001-%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[前言在网上搜索一些技术问题时，经常会看到一些非常简约大气的个人博客站点，所以也非常希望自己也可以搭建一个类似的个人站点。后来得知可以借助于Hexo和Github方便的生成属于自己的个人主页。 Hexo是一个快速、简洁且高效的博客框架。Hexo 使用（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 同时Hexo也支持丰富的主题模板，在此基础上，经过简单几步指令的执行，就可以生成非常美观的个人站点。 Github提供静态网站托管服务 ，我们可以将Hexo生成的网页项目托管到Github上，这样就可以通过互联网随时随地访问我们的网站，并且 GitHub Pages 支持绑定个人域名，本文也会介绍如何在freenom上申请域名，然后绑定到GitHub Pages，这样就可以通过个人域名访问自己的网站了。 一、安装环境准备1、检测环境变量在安装Hexo之前，需要安装Git 和Node.js 。 Git是一个开源的分布式版本控制系统 ，通过它可以将我们的本地代码库方便推送到远程仓库Github。 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境 ，Node.js 的包管理器 npm，是全球最大的开源库生态系统，npm类似于python中的pip。稍后便可以使用npm来安装Hexo 。 如果电脑之前安装过Git和Node.js，那么可以检测下安装环境，看是否正确安装。 检测方法，win+R键，输入cmd，在控制台窗口依次输入以下3条指令检查版本，如果都可以正确返回，说明安装没有问题。 123git --versionnode -vnpm -v 由于我的电脑之前就安装过git，但是可能环境变量出了问题，导致后面无法部署，之后添加了git/cmd环境变量，hexo环境变量又出了问题，添加了hexo，node环境变量又出了问题，之后干脆全部卸载重装了，所以检测这一步非常必要。 2、安装Git进入Git官网，下载对应版本的安装包，如果是windows，直接默认下一步安装即可，详细的安装过程和安装选项参见这篇文章： Git中文详细安装教程 3、安装Node.jsNode.js的安装也十分简便，直接去官网下载安装包，默认下一步安装即可。 安装完成后，再进行上面的检测，如果出现命令不能识别的情况，可能需要手动添加环境变量，或者重新安装。 二、Git和Github配置1、注册github账号首先需要一个github账号，如果还没有注册，进入官网注册即可，由于服务器在国外，访问速度可能不是很快。 2、创建仓库Github pages服务默认的仓库名是&lt;你的github用户名&gt; + github.io 所以需要建立一个这样的代码库，以便于存储我们的网站代码。 建立过程如下： 进入自己的github主页，点击左边的New repository按钮 Repository name填写&lt;你的github用户名&gt; + github.io，比如我的账号是wychencr，那么仓库名一定要填写wychencr.github.io，这里不能填错了 Description 可以填写一段文字描述，随便都可以，仓库属性选择public Initialize this repository with a README 可以不勾选 最后点击Create repository按钮即可 3、Git设置用户名与邮箱在桌面或其他任意位置，右键，选择git bash here，然后执行以下两条指令，”Your Name”和”email@example.com“分别填写自己的用户名和邮箱，如果之前就安装过git并且设置了个人信息，就可以忽略这个步骤。 12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 4、使用SSH连接Git与Github后面我们经常需要将本地代码通过git推送到github上，为了避免每次都输入密码，所以使用SSH连接。 SSH( Secure Shell )是一种安全协议，详细介绍参加这篇博文：详述SSH的原理及其应用 将Git与Github连接分为以下两步完成： 生成SSH公钥和秘钥在桌面或其他任意位置，右键，选择git bash here，然后执行以指令 1$ ssh-keygen -t rsa 表示使用RSA算法生成key，指令执行期间一直回车就可以了，最后会在用户文件夹下生成两个文件“id_rsa”和“id_rsa.pub” ，如图所示： “id_rsa.pub”对应的就是公钥，在C盘找到它，用记事本打开这个文件，复制其内容。 添加SSH公钥到github登录github账号，点击右上角的头像，选择Setting，在左侧Personal settings菜单栏选择SSH and GPG keys ，然后点击右上角的New SSH Key，将“id_rsa.pub”的内容复制到输入框中，标题title可以不填，注意SSH key 代码的前后不要留多余的空格或者回车。 添加完成后如下图所示： 这样，在传输时，远程的公钥就可以与本地的秘钥进行匹配了。 验证是否连接成功在 git bash 中输入以下指令： 1$ ssh -T git@github.com 看到以上结果说明SSH匹配成功。 三、安装Hexo1、使用npm安装Hexo进入cmd界面，输入以下指令即可安装好Hexo： 1$ npm install -g hexo-cli 如下图所示，可能等待时间稍长，我这里花了将近3分钟。 2、建立网站首先在本地电脑建立一个文件夹，用于管理和存储网站的代码，文件夹路径尽量不要有中文或者空格，避免出现意外的问题，比如我在E盘根目录建立一个HexoBlog文件夹。 然后执行下列三条指令即可建立好最基本的网站，非常便捷。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install &lt;folder&gt;是刚刚在本地建立的文件夹名称，比如我建立的文件夹是HexoBlog，所以我执行的指令就是 123$ hexo init HexoBlog$ cd HexoBlog$ npm install 过程如下图所示： 此时打开E:\HexoBlog\HexoBlog目录，可以看到生成的文件目录结构为： 12345_config.yml: 网站的配置信息，您可以在此配置大部分的参数package.json: 应用程序的信息scaffolds: 模版文件夹。当新建文章时，Hexo会根据scaffold来建立文件source: 存放用户资源的地方,比如用户新建的博客文章themes： 主题文件夹，Hexo会根据主题来生成静态页面 3、启动本地服务器 执行以下指令，启动本地服务器 1$ hexo server 浏览器中访问 http://localhost:4000/ 即可浏览到Hexo生成的最基本的网站 如果出现 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下： 1$ hexo server -p 5000 浏览器访问地址改成http://localhost:5000 四、新建和部署文章1、新建一篇文章1$ hexo new &lt;title&gt; &lt;title&gt;是文章标题，执行上述指令后，在/sources/_post文件夹下就会产生一个名为“title”的md文件，编辑它即可。 2、生成静态文件12$ hexo generate$ hexo g # 简写 当代码仓库中有文件改变时，执行上述指令可以重新生成静态文件，使改动生效。 3、本地查看效果在改动项目之后，可以先启动本地服务，在4000端口查看是否是自己预期的结果，如果没有问题，在部署到远程仓库。 12$ hexo server$ hexo s # 简写 4、部署到github此步骤可以将本地生成的项目文件推送部署到远程仓库，这样就可以使用username.github.io这样链接来访问我们的网站了。 12$ hexo deploy$ hexo d # 简写 如果是第一次部署，需要修改配置文件/HexoBlog/_config.yml： 1234deploy: type: git repo: &lt;repository url&gt; branch: [branch] [repository url]：填写之前新建的那个仓库地址，填写SSH地址，形式是 git@github.com:/.github.io.git [branch]：默认master 然后执行以下指令： 12$ npm install hexo-deployer-git --save$ hexo d 执行成功后，在github上的仓库中可以看到被部署的文件，稍微等待一段时间，就可以通过username.github.io访问到页面了。 五、更改Hexo主题1、下载主题在Hexo的主题商店 可以看到各种主题，选择自己喜欢的主题，下载压缩包，解压，放到/theme文件夹下。 以Next主题为例，首先访问Next的github仓库，下载解压，重命名为“next”，放入/theme文件夹下。 2、修改项目配置文件项目配置文件位于/HexoBlog/_config.yml，修改theme项为next： 1theme: next 注意冒号和next之间有一个空格。 3、修改主题配置文件主题配置文件位于/HexoBlog/themes/next/_config.yml。 Next主题支持四种样式效果，预览效果见官方说明文档 1234Muse 方案: LEAFERx | XiaMo | OAwansix_pointed_star Mist 方案: Jeff | uchuhimo | xirongpisces Pisces 方案: Vi | Acris | Rainygemini Gemini 方案: Ivan.Nginx | Raincal | Dandy 修改Schemes 1234scheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 默认是第一种，如果想改成其他效果，只要把对应项的注释取消，再把第一项注释掉即可。 修改语言 12/HexoBlog/_config.yml# language: zh-Hans 添加评论系统 进入来必力官网，使用谷歌邮箱注册登录，获取uid，然后复制到主题配置文件的livere_uid处： 添加一个标签/分类页面/社交媒体/Feed link 见官方说明文档 更多配置技巧见知乎专栏：Hexo搭建的GitHub博客之优化大全 六、一些注意事项1、博客文章中带图片的情况网上比较普遍的方案是安装一个图片上传插件，然后改成配置文件，再在资源文件夹下建立一个img文件夹，然后将图片都放到img文件夹中，然后在博文中使用相对路径。 这样做有两个问题： 一是操作相对繁琐，而是增加了仓库所占的容量，在推送到远程仓库时也会更加缓慢； 二是github pages对仓库容量有限制，不超过300M 因此推荐使用微博图床，可以在Chrome商店中搜索“微博图床”扩展，下载，之后登陆微博中账号就可以使用了。 2、Markdown写作工具推荐Typora，下载地址https://www.typora.io/ Typora是一款好用极简免费的跨平台Markdown编辑器，软件使用这款软件能够帮助用户轻松将文本转换到HTML，软件从底层向上设计，软件支持markdown的标准语法，同时这款软件还支持动态预览功能，一键预览，让一切都变得如此干净、纯粹，是一款不可多得的优质markdown编辑器。 3、Next主题自动生成目录 如果不想目录自动编号，修改主题设置文件，将number:改为false： 123456789# Table Of Contents in the Sidebartoc: enable: true # Automatically add list number to toc. number: false # If true, all words will placed on next lines if header width longer then sidebar width. wrap: false 自动生成目录混乱问题 父标题与子标题之间不能跨等级 123456H2 H4 H4H2 H4 ... 这样的结构可能就会出现问题，修改为连续的等级即可。 4、标注文章的分类和标签1234567title: xxxdate: 2018-10-18 15:14:41tags:- tag_A- tag_Bcategories:- categorie_C 5、CNAME文件被覆盖的问题当将github pages的url与自己的域名绑定后，在仓库中会生成一个CNAME文件，记录了域名。但是每次从本地部署代码后，github仓库中的CNAME文件就会被删除。 解决这个问题，可以把CNAME文件下载下来，放到仓库的/source文件夹中，再部署，就不会被覆盖了。 6、Hexo源文件的备份我们上传到github上的实际上是本地源代码库生成的静态文件，位于/public文件路径下。而我们的配置文件和博客.md文件等实际上都没有上传，如果硬盘除了问题，可能就没办法恢复了，所以需要备份本地源代码库，可以将其上传到github中，这样当我们更换电脑环境时，也可以重新从github上把源代码clong下来。 一种比较推荐的方法是，在github仓库中新建一个分支，保存源代码，另一个保存静态文件。 每次更改本地文件时，分别对两个分支执行deployed和push命令，这样就可以在生成静态文件的同时，也备份了源代码。 详细操作参见这篇博文： Hexo博客备份 当然，也可以新建一个github远程仓库，在本地将源代码仓库复制一份到硬盘的其他分区，备份到对应的远程仓库上，然后每次更新博文时，复制一份md文件到这个本地备份文件夹，再执行push操作，将md文件备份到远程仓库上。 当更换环境时，将备份仓库clone下来，安装Hexo环境，再重新生成部署即可。 这样做的好处是避免了分支操作，防止弄混淆，代价是多了一次复制操作，但是同时也算是给本地备份增加了一份保障。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matlab更换字体后 中文显示乱码问题]]></title>
    <url>%2F2018%2F06%2F21%2FMATLAB%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93%E5%90%8E%20%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前言MATLAB的脚本代码默认宋体显示，对于大多数720P的显示器来说，无论是中文还是英文，显示效果都非常差。Windows环境下，Consolas是一种比较理想的英文代码字体。 Consolas 字体是微软专为程序员开发的一种字体，这一字体的特性是所有字母、数字与符号均能非常容易辨认!而且所有字符都具有相同的宽度,让编程人员看着更舒适。但是不支持中文。 微软雅黑是个人电脑上可以显示的最清晰的中文字体之一,全面支持ClearType技术。 但是在MATLAB 2014b中将默认字体设置修改后，中文注释会出现乱码。解决方案是下载一种 Consolas 和 微软雅黑 的混合字体，这样既保证了代码的显示效果，而且也兼容了中文显示。 解决方案1、下载雅黑Consolas字体混合版 下载链接YAHEI CONSOLAS HYBRID.TTF 2、安装字体 下载后，双击，然后安装字体。 C:\Windows\Fonts文件夹下会出现刚刚安装成功的字体。 3、更改MATLAB的字体设置 打开MATLAB设置项。 然后选择新安装的字体，保存设置 4、查看效果 测试效果，发现中英文皆可正常显示。 Reference matlab字体终极解决方案 - CSDN博客 YaHei Consolas Hybrid(雅黑Consolas字体混合版) v1.12最新版 - 未来软件园]]></content>
      <categories>
        <category>matlab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
</search>
