<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Hexo和Github建立个人主页]]></title>
    <url>%2F2018%2F10%2F18%2F001-%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGithub%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[前言在网上搜索一些技术问题时，经常会看到一些非常简约大气的个人博客站点，所以也非常希望自己也可以搭建一个类似的个人站点。后来得知可以借助于Hexo和Github方便的生成属于自己的个人主页。 Hexo是一个快速、简洁且高效的博客框架。Hexo 使用（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 同时Hexo也支持丰富的主题模板，在此基础上，经过简单几步指令的执行，就可以生成非常美观的个人站点。 Github提供静态网站托管服务 ，我们可以将Hexo生成的网页项目托管到Github上，这样就可以通过互联网随时随地访问我们的网站，并且 GitHub Pages 支持绑定个人域名，本文也会介绍如何在freenom上申请域名，然后绑定到GitHub Pages，这样就可以通过个人域名访问自己的网站了。 一、安装环境准备1、检测环境变量在安装Hexo之前，需要安装Git 和Node.js 。 Git是一个开源的分布式版本控制系统 ，通过它可以将我们的本地代码库方便推送到远程仓库Github。 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境 ，Node.js 的包管理器 npm，是全球最大的开源库生态系统，npm类似于python中的pip。稍后便可以使用npm来安装Hexo 。 如果电脑之前安装过Git和Node.js，那么可以检测下安装环境，看是否正确安装。 检测方法，win+R键，输入cmd，在控制台窗口依次输入以下3条指令检查版本，如果都可以正确返回，说明安装没有问题。 123git --versionnode -vnpm -v 由于我的电脑之前就安装过git，但是可能环境变量出了问题，导致后面无法部署，之后添加了git/cmd环境变量，hexo环境变量又出了问题，添加了hexo，node环境变量又出了问题，之后干脆全部卸载重装了，所以检测这一步非常必要。 2、安装Git进入Git官网，下载对应版本的安装包，如果是windows，直接默认下一步安装即可，详细的安装过程和安装选项参见这篇文章： Git中文详细安装教程 3、安装Node.jsNode.js的安装也十分简便，直接去官网下载安装包，默认下一步安装即可。 安装完成后，再进行上面的检测，如果出现命令不能识别的情况，可能需要手动添加环境变量，或者重新安装。 二、Git和Github配置1、注册github账号首先需要一个github账号，如果还没有注册，进入官网注册即可，由于服务器在国外，访问速度可能不是很快。 2、创建仓库Github pages服务默认的仓库名是&lt;你的github用户名&gt; + github.io 所以需要建立一个这样的代码库，以便于存储我们的网站代码。 建立过程如下： 进入自己的github主页，点击左边的New repository按钮 Repository name填写&lt;你的github用户名&gt; + github.io，比如我的账号是wychencr，那么仓库名一定要填写wychencr.github.io，这里不能填错了 Description 可以填写一段文字描述，随便都可以，仓库属性选择public Initialize this repository with a README 可以不勾选 最后点击Create repository按钮即可 3、Git设置用户名与邮箱在桌面或其他任意位置，右键，选择git bash here，然后执行以下两条指令，”Your Name”和”email@example.com“分别填写自己的用户名和邮箱，如果之前就安装过git并且设置了个人信息，就可以忽略这个步骤。 12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 4、使用SSH连接Git与Github后面我们经常需要将本地代码通过git推送到github上，为了避免每次都输入密码，所以使用SSH连接。 SSH( Secure Shell )是一种安全协议，详细介绍参加这篇博文：详述SSH的原理及其应用 将Git与Github连接分为以下两步完成： 生成SSH公钥和秘钥在桌面或其他任意位置，右键，选择git bash here，然后执行以指令 1$ ssh-keygen -t rsa 表示使用RSA算法生成key，指令执行期间一直回车就可以了，最后会在用户文件夹下生成两个文件“id_rsa”和“id_rsa.pub” ，如图所示： “id_rsa.pub”对应的就是公钥，在C盘找到它，用记事本打开这个文件，复制其内容。 添加SSH公钥到github登录github账号，点击右上角的头像，选择Setting，在左侧Personal settings菜单栏选择SSH and GPG keys ，然后点击右上角的New SSH Key，将“id_rsa.pub”的内容复制到输入框中，标题title可以不填，注意SSH key 代码的前后不要留多余的空格或者回车。 添加完成后如下图所示： 这样，在传输时，远程的公钥就可以与本地的秘钥进行匹配了。 验证是否连接成功在 git bash 中输入以下指令： 1$ ssh -T git@github.com 看到以上结果说明SSH匹配成功。 三、安装Hexo1、使用npm安装Hexo进入cmd界面，输入以下指令即可安装好Hexo： 1$ npm install -g hexo-cli 如下图所示，可能等待时间稍长，我这里花了将近3分钟。 2、建立网站首先在本地电脑建立一个文件夹，用于管理和存储网站的代码，文件夹路径尽量不要有中文或者空格，避免出现意外的问题，比如我在E盘根目录建立一个HexoBlog文件夹。 然后执行下列三条指令即可建立好最基本的网站，非常便捷。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install &lt;folder&gt;是刚刚在本地建立的文件夹名称，比如我建立的文件夹是HexoBlog，所以我执行的指令就是 123$ hexo init HexoBlog$ cd HexoBlog$ npm install 过程如下图所示： 此时打开E:\HexoBlog\HexoBlog目录，可以看到生成的文件目录结构为： 12345_config.yml: 网站的配置信息，您可以在此配置大部分的参数package.json: 应用程序的信息scaffolds: 模版文件夹。当新建文章时，Hexo会根据scaffold来建立文件source: 存放用户资源的地方,比如用户新建的博客文章themes： 主题文件夹，Hexo会根据主题来生成静态页面 3、启动本地服务器 执行以下指令，启动本地服务器 1$ hexo server 浏览器中访问 http://localhost:4000/ 即可浏览到Hexo生成的最基本的网站 如果出现 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下： 1$ hexo server -p 5000 浏览器访问地址改成http://localhost:5000 四、新建和部署页面五、更改Hexo主题博客文章中带图片：不建议网上说的使用相对路径的方法，直接使用图床即可https://pic.xiaojianjian.net/]]></content>
      <tags>
        <tag>Hexo Github Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
